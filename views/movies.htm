<br /><br />
<div class="container">
	
	<ul>
		<li><a href="#"><!-- Genre --></a></li>
	</ul>

	<table>
		<thead>
			<tr><th>Title</th><th>Year</th><th>Rating</th></tr>			
		</thead>
		<tbody>
			<tr>
				<td><!-- Title --></td>
				<td><!-- Year --></td>
				<td><!-- Rating --></td>				
			</tr>
		</tbody>
	</table>

	<p><!-- Error Message --></p>
	<p>No records found.</p>

<p>First name: <input data-bind="value: firstName" /></p>
<p>Last name: <input data-bind="value: lastName" /></p>
<h2>Hello, <span data-bind="text: fullName"> </span>!</h2>

</div>	

 
  <script src="http://ajax.cdnjs.com/ajax/libs/json2/20110223/json2.js"></script>
  <script src="http://ajax.cdnjs.com/ajax/libs/underscore.js/1.1.6/underscore-min.js"></script>
  <script src="http://ajax.cdnjs.com/ajax/libs/backbone.js/0.3.3/backbone-min.js"></script>

  <script src="http://cdnjs.cloudflare.com/ajax/libs/knockout/3.0.0/knockout-min.js"></script>

  <script>
	// Here's my data model
	var ViewModel = function(first, last) {
	    this.firstName = ko.observable(first);
	    this.lastName = ko.observable(last);
	 
	    this.fullName = ko.computed(function() {
	        // Knockout tracks dependencies automatically. It knows that fullName depends on firstName and lastName, because these get called when evaluating fullName.
	        return this.firstName() + " " + this.lastName();
	    }, this);
	};
	 
	ko.applyBindings(new ViewModel("Planet", "Earth")); // This makes Knockout get to work  
  </script>

  <script>
	(function($){
	  // **ListView class**: Our main app view.
	  var ListView = Backbone.View.extend({
	    el: $('body'), // attaches `this.el` to an existing element.
	    // `initialize()`: Automatically called upon instantiation. Where you make all types of bindings, _excluding_ UI events, such as clicks, etc.
	    initialize: function(){
	      _.bindAll(this, 'render'); // fixes loss of context for 'this' within methods

	       this.render(); // not all views are self-rendering. This one is.
	    },
	    // `render()`: Function in charge of rendering the entire view in `this.el`. Needs to be manually called by the user.
	    render: function(){
	      $(this.el).append("<ul> <li>hello world</li> </ul>");
	    }
	  });

	  // **listView instance**: Instantiate main app view.
	  var listView = new ListView();
	})(jQuery);
  </script>

	<style>
		body { font-family: arial; font-size: 14px; }
		.liveExample { padding: 1em; background-color: #EEEEDD; border: 1px solid #CCC; max-width: 655px; }
		.liveExample input { font-family: Arial; }
		.liveExample b { font-weight: bold; }
		.liveExample p { margin-top: 0.9em; margin-bottom: 0.9em; }
		.liveExample select[multiple] { width: 100%; height: 8em; }
		.liveExample h2 { margin-top: 0.4em; font-weight: bold; font-size: 1.2em; }	
	</style>  
